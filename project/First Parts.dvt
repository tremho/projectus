
# Feature Name
First Parts

# Description
The first parts of the application need to be established as a core dependency.
This includes the UI framework and common binding mechanism, the AppModel that handles the data exchange between
the UI and AppCore layers.  The AppCore will hand off to Action Modules that are created to fit the supported
project types to handle discovery, build, and verity tasks.

The UI starts should define the basic screen layout and panel structure into sections that will be filled in
as the project progresses.

Kicking things off, is being able to parse .dvt files like this one, starting with concept.dvt


## Objectives
- Project type is identified and recorded in app core
- Top Level project info is fed into model
- Top Level info is represented in UI
- DVT file is parsed
- Tests are generated from feature objectives
- Code files are discovered by type, with file info
- Features are reconciled to code files
- Tests are run and results recorded in app core
- Test results appear in UI


$ UI Components

    - grid-layout
    - grid-section
    - name-version
    - summary-drop-down
        > general/drop-down
    - repository-info
    - tree-view
        > expandable-node

$ Code

    - app-core/AppCore
        > app-core/AppModel
        > app-core/DVTParser

    - appMain
        > app-core/AppCore
