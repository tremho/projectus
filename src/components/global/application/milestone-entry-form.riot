
<milestone-entry-form>
    <div class="milestone-panel-display" style="visibility: {getVisibility()}" bind="uiElements.msState">
        <span class="label">Name:</span><input id='msName' type="text" class="value" value="{(bound.msEntry && bound.msEntry.name)}"/>
        <span class="label value">TargetDate:</span><date-picker id="msDate"/>
        <todo items="{(bound.msEntry && bound.msEntry.objectives) || []}" addLabel = 'Objective'/>
        <vertical-space height="20px"/>
        <button onclick="{enterMilestone}">Enter Milestone</button>&nbsp;&nbsp;
        <button onclick="{cancel}">Cancel</button>
    </div>
    <style>    
    </style>
    <script>
        import {newCommon} from '../../Common';
        let cm;
        export default {
            state: {},
            bound: {
              msEntry: {
                name: '',
                targetDate: '',
                objectives: []
              }
            },
            cancel() {
              cm.getApp().model.setAtPath('uiElements.msState', 'display')
            },
            enterMilestone(e) {
              const comp = cm.getComponent(e.srcElement)
              console.log('got entry component', comp)
              const todo = cm.getComponentChild('todo')
              console.log('got todo component', todo)
              const objectives = todo.getItems()
              // gather the info
              const msInfo = {
                name: document.getElementById('msName').value,
                targetDate: document.getElementById('msDate').value,
                objectives
              }
              console.log('milestone data to enter: ', msInfo)
              this.cancel();
            },
            getVisibility() {
                if(cm.getApp().model.getAtPath('uiElements.msState') === 'entry') return 'visible'
                return 'hidden'
            },
            onBeforeMount(props, state) {
              cm = newCommon(this)
            },    
            onMounted(props, state) {
              console.log(this.root.tagName, 'onMounted', props, state)
              cm.bindComponent()
            },
            onBeforeUpdate(props, state) {              
            },
            onUpdated(props, state) {              
            },
            onBeforeUnmount(props, state) {              
            },
            onUnmounted(props, state) {              
            }
    }
    </script>
</milestone-entry-form>    
