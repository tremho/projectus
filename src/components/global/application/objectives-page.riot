
<objectives-page>
    <div bind="concept.milestones,uiElements.msSelectedIndex">
        <grid-layout
                grid-template-columns = "repeat(3, 1fr)"
                grid-template-rows = "auto"
                area-row-1 = "t d d">

            <grid-section area="t">
                <div each="ms in bound.milestones">
                <labeled-value start="{count=0}" each="obj in ms.objectives"
                           class="{isSelected(obj) ? 'selected' :  ''}"
                           msIndex = "{count++}"
                           label="{ms.name}"
                           value="{obj.title}"
                           width="200px" onclick="{onSelect}"/>
                </div>


            </grid-section>
            <grid-section area="d">

                <div if="{state.mode === 'status'}">

                    <div each="uc in getUseCases()">
                        <labeled-value label="{uc.pkg}"
                                       value = "{uc.actor} {uc.scenario}"
                                       width="300px"
                                       />
                        <button if="{needsAPI(uc)}" onclick="{makeAPI}">Create API</button>
                    </div>
                    <blank-space height="30px"/>
                    <button if="{state.objective}" onclick="{makeUseCase}">Add new Use Case</button>
<!--                    <button if="{!needsUseCase() && needsAPI()}" onclick="{makeAPI}">Create API</button>-->
                </div>

                <use-case-entry if="{state.mode === 'usecase'}" msIndex="{state.objective && state.objective.msIndex}" obIndex="{state.index}"/>
                <api-spec-entry if="{state.mode === 'api'}"
                                msIndex="{state.objective && state.objective.msIndex}"
                                obIndex="{state.index}"
                                ucIndex="{state.ucIndex}"
                />


            </grid-section>
        </grid-layout>

    </div>
    <style>
        .selected {
            color: crimson;
        }
        .listing {
            cursor: pointer;
        }
    </style>
    <script>
        import {newCommon} from '../../Common';
        let cm;
        export default {
            state: {
              mode: 'status'
            },
            bound: {},
            onBeforeMount(props, state) {    
              cm = newCommon(this)
            },
            onMounted(props, state) {
              cm.bindComponent()
            },
            onBeforeUpdate(props, state) {
              console.log(this.root.tagName, 'onBeforeUpdate', props, state)
            },
            onUpdated(props, state) {              
            },
            onBeforeUnmount(props, state) {
            },
            onUnmounted(props, state) {              
            },
            getSelectedObjective() {
                let index = this.state.index
                let milestones = this.bound.milestones
                let counter = 0;
                let msCounter = -1;
                let foundObj = null
                milestones.forEach(ms => {
                  msCounter++;
                  ms.objectives.forEach(obj => {
                    if(counter === index) {
                      foundObj = obj;
                      foundObj.msIndex = msCounter
                    }
                    counter++
                  })
                })
                this.state.objective = foundObj
            },
            getUseCases() {
              console.log('getUseCases')
              if(this.state && this.state.objective) {
                const specs = this.state.objective.specifications
                if(specs && specs.uml) {
                    return specs.uml.useCases
                }

              }
              return []
            },
            isSelected(obj) {
              if(obj.scenario) {
                return this.state.case.scenario && this.state.scenario === obj.scenario
              }
              return this.state.objective && obj.title === this.state.objective.title
            },
            onSelect(e) {
              let el = e.srcElement
              // find the milestone-page parent container
              let comp = cm.getComponent(el) // labeled value
              let section = cm.getComponentParent(comp)
              let labelEl = comp.root
              comp = cm.getComponentParent(comp, 'objectives-page')
              // find the index of the labeled-value that contains this element
              this.state.index = cm.findChildIndexWithElement(section, labelEl)
              this.getSelectedObjective()
              comp.update()
            },
            needsUseCase() {
              const obj = this.state.objective
              if(!obj) return false;
              if(!obj.specifications) return true;
              if(!obj.specifications.uml) return true;
            },
            needsAPI(uc) {
              const obj = this.state.objective
              if(!obj) return false;
              if(!obj.specifications) return true;
              if(!obj.specifications.api) return true;
              return true; // for now at least

            },
            makeUseCase(e) {
              const comp = cm.getComponent(e.srcElement)
              comp.update({
                mode: 'usecase'
              })
            },
            makeAPI(e) {
              let el = e.srcElement;
              let cdiv = el.parentElement
              let children = cdiv.parentElement.children;
              let index = -1;
              for(let i = 0; i < children.length; i++) {
                if(children[i] === cdiv) {
                  index = i;
                  break;
                }
              }
              const comp = cm.getComponent(e.srcElement)
              this.state.mode = 'api'
              this.state.ucIndex = index;
              comp.update()

            }

    }
    </script>
</objectives-page>    
